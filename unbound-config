#!/usr/bin/env bash

export LC_ALL=C

# unbound-config version
version="0.9.2"

# Current major unbound-config Unbound binary version
unbound_version="1.13.3"

# More Unbound vars
unbound_dir="/usr/sbin"
unbound_config_dir="/etc/unbound/unbound.conf.d"
# Bizarrely not the same path as any other unbound-* binary
unbound_host_dir="/usr/bin"

# Assume a posix /tmp exists
temp_dir="/tmp"

# We might use these in multiple places
date_format="$(date +%Y%m%d%H%M)"
host_arch="$(uname -m)"
launch_dir="$(pwd)"
test_cores="$(grep -c ^processor /proc/cpuinfo)"

# if you know me, you know we have to have one
obnoxious_header() {
    echo -e "\e[31;1m               _                           _                       __ _         "
    echo -e "   _   _ _ __ | |__   ___  _   _ _ __   __| |      ___ ___  _ __  / _(_) __ _   "
    echo -e "  | | | | '_ \\| '_ \ / _ \| | | | '_ \\ / _\` |____ / __/ _ \\| '_ \\| |_| |/ _\` |  "
    echo -e "  | |_| | | | | |_) | (_) | |_| | | | | (_| |____| (_| (_) | | | |  _| | (_| |  "
    echo -e "   \__,_|_| |_|_.__/ \___/ \__,_|_| |_|\__,_|     \___\___/|_| |_|_| |_|\__, |  "
    echo -e "                                                                        |___/   \e[0m\n"
    echo -e "      unbound-config: Configuration and management for NLnet Labs' Unbound\n"
}

# The following is mostly scattered around in no particular order and needs a
# fair bit of reordering, refactoring, and reduction
# Some functions are fairly modular, others probably should be more so

# Whiptail dialog box proportions
height="12"
width="72"

# User confirmation handler using whiptail
confirm_action() {
    package="whiptail"
    test_package
    # Use whiptail to create a confirmation dialogue box of $height and $width
    # --defaultno does what it sounds like it does
    whiptail --title "$title_text" --backtitle "unbound-config v$version" --yesno --defaultno "Are you sure you want to $action_text?" $height $width
    # Check which response we got
    response=$?
    case $response in
        0 )
            ;;
        1 )
            # We required explicit confirmation and we didn't get it
            echo -e "Exiting unbound-config"
            exit 0 ;;
        255 )
            # Abandon ship
            echo -e "Escape key was pressed"
            exit 1 ;;
    esac
}

# Much like confirm_action, but for general messages that need to be seen
message_box() {
    package="whiptail"
    test_package
    # Use whiptail to create a message dialogue box of $height and $width
    # --msgbox is useful when we want to display a message and confirm the user
    # saw it
    whiptail --title "$title_text" --backtitle "unbound-config v$version" --msgbox "$message_text" $height $width
}

# Backup the current Unbound configuration if it exists
backup_config() {
    obnoxious_header
    if [[ -d "$unbound_config_dir" ]]; then
        # There is an Unbound config directory, try check if it is empty or not
        if [[ "$(ls -A $unbound_config_dir)" ]]; then
            package="tar"
            test_package
            # Create the backup directory if it does not already exist
            if [[ ! -d "$unbound_config_dir-backup" ]]; then
                echo -e "Creating Unbound configuration backup directory ..."
                mkdir $unbound_config_dir-backup
                echo -e "\t- Done\n"
            fi
            # Switch to the backup directory
            cd $unbound_config_dir-backup
            # Make a .tar.gz archive of the current Unbound configuration
            echo -e "Backing up the current Unbound configuration ...\n"
            # Strange tar dance to make an archive of just the target
            # directory contents without a skeleton parent directory structure
            tar -czvf $date_format.tar.gz -C $unbound_config_dir .
            echo -e "\n\t- Done\n"
            # Switch back to where we launched from
            cd $launch_dir
            echo -e "Backup saved to a .tar.gz archive located within"
            echo -e "$unbound_config_dir-backup"
            echo -e "\nThe backup ID naming convention is YYYYMMDDHHMM"
        else
            # The Unbound configuration directory exists but we think
            # it is empty so there is nothing to back up
            echo -e "No Unbound configuration found in"
            echo -e "$unbound_config_dir"
            echo -e "\nCannot backup Unbound configuration, no configuration to backup"
        fi
        else
        # There is no Unbound configuartion directory so there is nothing
        # to archive
        echo -e "No Unbound configuration directory exists at"
        echo -e "$unbound_config_dir"
        echo -e "\nCannot backup Unbound configuration, no configuration directory"
        exit 0
    fi
}

# Offer to remove the current Unbound configuration if it exists but force
# a backup flow in order to do it
remove_config() {
    obnoxious_header
    action_text="remove Unbound's current configuration"
    if [[ -d "$unbound_config_dir-backup" ]]; then
        # A backup directory exists, check if there are any archives
        if [[ "$(ls -A $unbound_config_dir-backup/*.tar.gz)" ]]; then
            # We think there is at least one archive in it
            if [[ -d "$unbound_config_dir" ]]; then
                # An Unbound configuration directory exists
                if [[ "$(ls -A $unbound_config_dir)" ]]; then
                    # A config probably exists
                    title_text="This command will $action_text"
                    confirm_action
                    echo -e "Removing current Unbound configuration ..."
                    # It's probably safe to clear the configuration directory
                    rm -fr $unbound_config_dir/*
                    echo -e "\t- Done\n"
                else
                    # No Unbound configuration exists
                    echo -e "No Unbound configuration found in"
                    echo -e "$unbound_config_dir"
                    echo -e "\nCannot remove Unbound configuration, no configuration to remove"
                fi
            else
                # No Unbound configuration directory exists
                # It is either not there or not where we think it is
                echo -e "No Unbound configuration directory found at"
                echo -e "$unbound_config_dir"
                echo -e "\nCannot remove Unbound configuration, no configuration directory"
            fi
        else
            # A backup directory exists but no archives exist within it
            title_text="A backup is required to $action_text"
            action_text="make a backup now"
            confirm_action
            backup_config
            remove_config
        fi
    else
        # No Unbound configuration backup directory exists
        title_text="A backup is required to $action_text"
        action_text="make a backup now"
        confirm_action
        backup_config
        remove_config
    fi
}

delete_backups() {
    obnoxious_header
    if [[ -d "$unbound_config_dir-backup" ]]; then
        # There's an Unbound configuration backup directory present
        if [[ "$(ls -A $unbound_config_dir-backup)" ]]; then
            # The backup Unbound configuration backup directory is populated
            # Confirm we really want to do this
            action_text="remove all Unbound configuration backups"
            title_text="This command will $action_text"
            confirm_action
            echo -e "Removing Unbound configuration backup directory ..."
            rm -fr $unbound_config_dir-backup
            echo -e "\t- Done"
        else
            # We believe the Unbound configuration backup directory to be
            # empty and therefore safe to remove without confirmation
            echo -e "Removing Unbound configuration backup directory ..."
            rm -fr $unbound_config_dir-backup
            echo -e "\t- Done"
        fi
    else
        # No Unbound configuration backup directory exists
        echo -e "No Unbound configuration backup directory found at"
        echo -e "$unbound_config_dir-backup"
        echo -e "\nCannot remove backups, no backup directory"
    fi
}

list_backups() {
    obnoxious_header
    # Check for a backup directory
    if [[ -d "$unbound_config_dir-backup" ]]; then
        # A backup directory exists, check if there are any archives
        if [[ "$(ls -A $unbound_config_dir-backup)" ]]; then
            # Backup directory is not empty
            echo -e "Listing backup IDs found in $unbound_config_dir-backup ...\n"
            # List the contents of the backup directory
            ls -A1 $unbound_config_dir-backup | sed -e 's/\.tar.gz$//'
            echo -e "\n\t- Done\n"
        else
            # Backup directory is empty
            echo -e "No Unbound configuration archives found in"
            echo -e "$unbound_config_dir-backup"
            echo -e "\nCannot list backup IDs, no backup IDs to list"
        fi
    else
        # No Unbound configuration backup directory exists
        echo -e "No Unbound configuration backup directory found at"
        echo -e "$unbound_config_dir-backup"
        echo -e "\nCannot list backup IDs, no backup directory"
    fi
}

restore_backup() {
    # The --restore-backup flag requires an argument
    if [[ "$2" == "" ]]; then
        echo -e "This flag requires a backup ID"
        echo -e "Use --list-backups to list possible backup IDs\n"
        echo -e "Example: unbound-config --restore-backup 197001010000"
        exit 1
    fi
    obnoxious_header
    # Check if the backup ID passed exists and restore it on success
    backup_id="$2"
    if [[ -f "$unbound_config_dir-backup/$backup_id.tar.gz" ]]; then
        echo -e "Restoring Unbound configuration with backup ID $backup_id ...\n"
    else
        # Probably not a valid backup ID
        echo -e "Invalid Unbound configuration backup ID"
        echo -e "Use --list-backups to list possible backup IDs\n"
        echo -e "Example: unbound-config --restore-backup 197001010000"
        exit 0
    fi
    # Check for an Unbound configuration directory
    if [[ -d "$unbound_config_dir" ]]; then
        # An Unbound configuration directory exists
        if [[ -d "$unbound_config_dir-backup" ]]; then
            # An Unbound configuration backup directory exists
            if [[ "$(ls -A $unbound_config_dir-backup)" ]]; then
                # The backup directory exists and is not empty
                # Test for tar before we try use it
                package="tar"
                test_package
                action_text="restore a backup with ID $backup_id"
                title_text="This command will $action_text"
                confirm_action
                echo -e "Removing current Unbound configuration if any exists..."
                # If we are restoring a backup, first nuke any current config
                rm -fr $unbound_config_dir/*
                echo -e "\t- Done\n"
                # Extract the archive to its destination
                echo -e "Restoring Unbound configuration backup...\n"
                tar -vzxf $unbound_config_dir-backup/$backup_id.tar.gz -C $unbound_config_dir
                echo -e "\n\t- Done"
            else
                # The backup directory is empty
                echo -e "No Unbound configuration backups found in"
                echo -e "$unbound_config_dir-backup"
                echo -e "\nCannot restore backup, no backup to restore"
            fi
        else
            # No Unbound configuration backup directory exists
            echo -e "No Unbound configuration backup directory found at"
            echo -e "$unbound_config_dir-backup"
            echo -e "\nCannot restore backup, no backup directory"
        fi
    else
        # No Unbound configuration directory exists
        echo -e "No Unbound configuration directory found at"
        echo -e "$unbound_config_dir"
        echo -e "\nCannot restore backup, no configuration directory"
    fi
}

show_version() {
    echo -e "unbound-config v$version"
}

# We all need a little help from time to time
help_function() {
    echo -e "Usage: unbound-control OPTION

Where OPTION is one of

    -b                      Backup the current Unbound configuration to a
    backup                  .tar.gz archive located within
    --backup-config         $unbound_config_dir-backup
                            The backup ID naming convention is YYYYMMDDHHMM

    -c                      Make a backup of the Unbound configuration directory
    config-recommended      $unbound_config_dir
    --config-recommended    Remove the current Unbound configuration, and
                            install unbound-config base config and additional
                            recommended config fragments

                            Requires libevent-dev to be installed

    -d                      Download unbound-config Unbound binaries in a
    download                .tar.gz archive to $temp_dir
    --download-binaries     Takes the optional parameter --force to remove an
                            existing binary package before downloading a new
                            one

    -D                      Delete all Unbound configuration backups that
    delete                  unbound-config --backup has made
    --delete-backups

    -h                      Displays this help dialogue
    help
    --help

    -i                      Install unbound-config unbound binaries:
    install                 unbound, unbound-anchor, unbound-checkconf,
    --install-binaries      unbound-control, unbound-control-setup, unbound-host

    -l                      List possible backup IDs found in
    list-backups            $unbound_config_dir-backup
    --list-backups          Useful for getting backup IDs for --restore-backup

    -r                      Remove the current Unbound configuration
    remove-config
    --remove-config

    -R ID                   Restore a backup of your Unbound configuration to
    restore-backup ID       the Unbound configuration directory
    --restore-backup ID     Use --list-backups to list possible backup IDs

    -u                      Uninstall unbound-config unbound binaries
    uninstall
    --uninstall-binaries

    -v                      Displays the unbound-config version
    version                 Current unbound-config version v$version
    --version"
}

# Extremely basic service handler function
# What could go wrong here?
service_handler() {
    package="systemctl"
    test_package
    echo -e "Sending systemctl $service_action to $service ..."
    systemctl $service_action $service
    echo -e "\t- Done\n"
}

# The ugliest dependency check you'll ever see
test_package() {
    package_query=$(dpkg-query -W --showformat='${Status}\n' $package|grep "install ok installed")
    if [[ "$package_query" == "" ]]; then
        echo -e "\e[31;1m$package is not installed\e[0m\n"
        echo -e "Install $package using your system package manager and then run this script again"
        exit 1
    fi
}

test_architecture() {
    # I can't use uname -i here like I normally would because raspberrypi
    # devices may report unknown for this flag which is super helpful
    echo -e "Testing host architecture ..."
    if [[ "$host_arch" == "aarch64" ]]; then
        # Host can use aarch64 binaries
        host_arch="aarch64"
    else
        if [[ "$host_arch" == "armv7l" ]] || [[ "$host_arch" == "armv6l" ]]; then
            # Host can use armhf binaries
            host_arch="armhf"
        else
            # Neither aarch64 nor armhf
            echo -e "\nIncompatible host architecture"
            echo -e "Supported host architectures: aarch64, armhf (armv6l, armv7l)\n"
            echo -e "Your host architecture is $host_arch"
            exit 1
        fi
    fi
    echo -e "\t- Done\n"
}

# Install unbound-config recommended configuration fragments
config_recommended() {
    obnoxious_header
    # Test if it even makes any sense to install this config
    package="unbound"
    test_package
    # libevent is also required
    package="libevent-dev"
    test_package
    package="wget"
    test_package
    action_text="install recommended Unbound config fragments"
    title_text="This command will $action_text"
    confirm_action
    # Backup first
    backup_config
    # Remove existing config
    remove_config
    #Install required unbound-config base config
    echo -e "Installing base.conf ..."
    wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/base.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    # Install recommended unbound-config config fragments
    echo -e "Installing buffers.conf ..."
    wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/buffers.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing caches.conf ..."
    wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/caches.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing hardening.conf ..."
    wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/hardening.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing libevent.conf ..."
    wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/libevent.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    # Test CPU cores to see if we should enable multithreading
    echo -e "Determining number of CPU cores ..."
    if [ "$test_cores" -gt "1" ]; then
        # Download multithreading.conf if there's more than one core
        echo -e "\t- $test_cores CPU cores detected\n"
        echo -e "Installing multithreading.conf ..."
       wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/multithreading.conf -P $unbound_config_dir
        echo -e "\t- Done\n"
    else
        # Otherwise skip downloading multithreading.conf
        echo -e "\t- $test_cores CPU core(s) detected\n"
        echo -e "Skipping multithreading.conf\n"
    fi
    echo -e "Installing prefetch.conf ..."
    wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/prefetch.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing private-ranges.conf ..."
    wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/private-ranges.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing verbosity.conf ..."
    wget https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/verbosity.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
}

# Download unbound-config .tar.gz packaged Unbound binaries
download_binaries() {
    obnoxious_header
    # Add a parameter to allow forcing download of an unbound binary package
    # even if a current one already exists in the target directory
    if [[ "$2" == "--force" ]]; then
        if [[ -f "$temp_dir/unbound-$unbound_version.tar.gz" ]]; then
            rm $temp_dir/unbound-$unbound_version.tar.gz
        fi
    fi
    test_architecture
    package="wget"
    test_package
    # Use test_arch result to determine which package to download
    echo -e "Downloading unbound-config Unbound binaries for $host_arch ..."
    # Only download if newer or nonexistent
    wget -c -nv -N https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/binaries/$host_arch/unbound-$unbound_version.tar.gz -P $temp_dir
    echo -e "\t- Done\n"
    echo -e "Extracting unbound-$unbound_version.tar.gz to $temp_dir ...\n"
    tar -vzxf $temp_dir/unbound-$unbound_version.tar.gz -C $temp_dir
    echo -e "\n\t- Done\n"
    # Display the unbound-config version
    $temp_dir/unbound-config --version
    exit 0
}

# Install unbound-config Unbound binaries
install_unbound() {
    obnoxious_header
    # Seems counterintuitive I know
    # Use the system package manager's setup of Unbound
    action_text="install unbound-config Unbound binaries"
    title_text="Before you $action_text"
    message_text="It is safe, but not necessarily recommended to replace the system unbound binaries with those provided. Any updates to the system package will remove the custom binary."
    message_box
    package="unbound"
    test_package
    test_architecture
    title_text="This command will $action_text"
    confirm_action
    echo -e "Stopping Unbound ..."
    service_action="stop"
    service="unbound"
    service_handler
    echo -e "Installing unbound ..."
    cp $temp_dir/unbound $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-anchor ..."
    cp $temp_dir/unbound-anchor $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-checkconf ..."
    cp $temp_dir/unbound-checkconf $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-control ..."
    cp $temp_dir/unbound-control $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-control-setup ..."
    cp $temp_dir/unbound-control-setup $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-host ..."
    cp $temp_dir/unbound-host $unbound_host_dir
    echo -e "\t- Done\n"
    echo -e "Starting Unbound ..."
    service_action="start"
    service_handler
}

# Uninstall unbound-config Unbound binaries
uninstall_unbound() {
    obnoxious_header
    package="unbound"
    test_package
    action_text="uninstall unbound-config Unbound binaries"
    title_text="This command will $action_text"
    confirm_action
    echo -e "Stopping Unbound ..."
    service_action="stop"
    service="unbound"
    service_handler
    echo -e "\t- Done\n"
    echo -e "Uninstalling unbound ..."
    rm $unbound_dir/unbound
    echo -e "\t- Done\n"
    echo -e "Uninstalling unbound-anchor ..."
    rm $unbound_dir/unbound-anchor
    echo -e "\t- Done\n"
    echo -e "Uninstalling unbound-checkconf ..."
    rm $unbound_dir/unbound-checkconf
    echo -e "\t- Done\n"
    echo -e "Uninstalling unbound-control ..."
    rm $unbound_dir/unbound-control
    echo -e "\t- Done\n"
    echo -e "Uninstalling unbound-control-setup ..."
    rm $unbound_dir/unbound-control-setup
    echo -e "\t- Done\n"
    echo -e "Uninstalling unbound-host ..."
    rm $unbound_host_dir/unbound-host
    echo -e "\t- Done\n"
    title_text="After you $action_text"
    message_text="Reinstall or uninstall Unbound using your system package manager\n\nExample:\nsudo apt install --reinstall unbound\nsudo apt remove unbound"
    message_box
}

# The current user needs to be root or have access to sudo
if [[ ! $EUID -eq 0 ]];then
    if [[ -x "$(command -v sudo)" ]]; then
        exec sudo bash "$0" "$@"
        exit $?
    else
        echo -e "\e[31;1m\t- Run unbound-config as root or install sudo\e[0m\n"
        echo -e "\t- Aborting"
        exit 1
    fi
fi

# Define the commandline options unbound-config accepts and assign a function
case "${1}" in
    "-b" | "backup-config" | "--backup-config"              ) backup_config ;;
    "-c" | "config-recommended" | "--config-recommended"    ) config_recommended ;;
    "-d" | "download" | "--download-binaries"               ) download_binaries "$@" ;;
    "-D" | "delete" | "--delete-backups"                    ) delete_backups ;;
    "-h" | "help" | "--help"                                ) help_function ;;
    "-i" | "install" | "--install-binaries"                 ) install_unbound ;;
    "-l" | "list-backups" | "--list-backups"                ) list_backups  ;;
    "-r" | "remove-config" | "--remove-config"              ) remove_config ;;
    "-R" | "restore-backup" | "--restore-backup"            ) restore_backup "$@" ;;
    "-u" | "uninstall" | "--uninstall-binaries"             ) uninstall_unbound ;;
    "-v" | "version" | "--version"                          ) show_version ;;
    # Direct wildcards to --help
    *                                                       ) help_function ;;
esac
