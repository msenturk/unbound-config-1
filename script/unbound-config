#!/usr/bin/env bash

# unbound-config

# Hayden Pearce (saint-lascivious) 2021
# saint@sainternet.xyz

export LC_ALL=C

# unbound-config version
version="1.3.4"

# Current unbound-config Unbound binary version
unbound_version="1.14.1"

# More Unbound vars
unbound_dir="/usr/sbin"
unbound_config_dir="/etc/unbound/unbound.conf.d"
# Bizarrely not the same path as any other unbound-* binary
unbound_host_dir="/usr/bin"

# Assume a posix /tmp exists
temp_dir="/tmp"

# Whiptail dialogue box proportions
height="12"
width="72"

# if you know me, you know we have to have one
obnoxious_header() {
    echo -e "\e[31;1m               _                           _                       __ _         "
    echo -e "   _   _ _ __ | |__   ___  _   _ _ __   __| |      ___ ___  _ __  / _(_) __ _   "
    echo -e "  | | | | '_ \\| '_ \ / _ \| | | | '_ \\ / _\` |____ / __/ _ \\| '_ \\| |_| |/ _\` |  "
    echo -e "  | |_| | | | | |_) | (_) | |_| | | | | (_| |____| (_| (_) | | | |  _| | (_| |  "
    echo -e "   \__,_|_| |_|_.__/ \___/ \__,_|_| |_|\__,_|     \___\___/|_| |_|_| |_|\__, |  "
    echo -e "                                                                        |___/   \e[0m"
    echo -e " v$version"
    echo -e "         Configuration & Management Of NLnet Labs' Unbound DNS Resolver\n"
}

# The following is mostly scattered around in no particular order and needs a
# fair bit of reordering, refactoring, and reduction - or to not exist
# Some functions are fairly modular, others probably should be more so

# User confirmation handler using whiptail
confirm_action() {
    package="whiptail"
    test_package
    # Use whiptail to create a confirmation dialogue box of $height and $width
    # --defaultno does what it sounds like it does
    whiptail --title "$title_text" --backtitle "unbound-config v$version" --yesno --defaultno "Are you sure you want to $action_text?" $height $width
    # Check which response we got
    response=$?
    case $response in
        0 )
            ;;
        1 )
            # We required explicit confirmation and we didn't get it
            echo -e "Exiting unbound-config"
            exit 0 ;;
        255 )
            # Abandon ship
            echo -e "Escape key was pressed"
            exit 1 ;;
    esac
}

# Much like confirm_action, but for general messages that need to be seen
message_box() {
    package="whiptail"
    test_package
    # Use whiptail to create a message dialogue box of $height and $width
    # --msgbox is useful when we want to display a message and confirm the user
    # saw it
    whiptail --title "$title_text" --backtitle "unbound-config v$version" --msgbox "$message_text" $height $width
}

# Backup the current Unbound configuration if it exists
backup_config() {
    obnoxious_header
    # Date format breaks down to YYYYMMDDHHMM
    date_format="$(date +%Y%m%d%H%M)"
    # Sanitise user input
    input_format="$(echo $2 | sed -e 's/[^A-Za-z0-9._-]/_/g')"
    launch_dir="$(pwd)"
    if [[ -d "$unbound_config_dir" ]]; then
        # There is an Unbound config directory, try check if it is empty or not
        if [[ "$(ls -A $unbound_config_dir)" ]]; then
            package="tar"
            test_package
            # Create the backup directory if it does not already exist
            if [[ ! -d "$unbound_config_dir-backup" ]]; then
                echo -e "Creating unbound-config backup directory ..."
                mkdir $unbound_config_dir-backup
                echo -e "\t- Done\n"
            fi
            # Switch to the backup directory
            cd $unbound_config_dir-backup
            # Make a .tar.gz archive of the current Unbound configuration
            echo -e "Backing up the current Unbound configuration ...\n"
            # Allow an optional string to be passed to be used as backup ID,
            # default to the current date and time if no value is given
            if [[ ! -n "$2" ]]; then
                archive_name="$date_format.tar.gz"
            else
                if [[ "$2" == "--rfc3339" ]]; then
                    # Optional rfc3339 compliant backup IDs
                    # Date format breaks down to YYYY-MM-DDTHH:MM:SS-00:00
                    # full date and full time separated by a capital T and
                    # preprended by the local UTC offset
                    date_format="$(date +%Y-%m-%dT%H:%M:S%:z)"
                    archive_name="$date_format.tar.gz"
                else
                    # get rekt localisation
                    # legal characters are "a-z A-Z 0-9 . _ -", anything else
                    # is replaced by an underscore
                    archive_name="$input_format.tar.gz"
                fi
            fi
            # Strange tar dance to make an archive of just the target
            # directory contents without a skeleton parent directory structure
            tar -czvf "$archive_name" -C $unbound_config_dir . --force-local
            echo -e "\n\t- Done\n"
            # Switch back to where we launched from
            cd $launch_dir
            echo -e "Backup saved to a .tar.gz archive located within"
            echo -e "$unbound_config_dir-backup"
            echo -e "\nThe backup ID naming convention is YYYYMMDDHHMM"
        else
            # The Unbound configuration directory exists but we think
            # it is empty so there is nothing to back up
            echo -e "No Unbound configuration found in"
            echo -e "$unbound_config_dir"
            echo -e "\nCannot backup Unbound configuration, no configuration to backup"
        fi
        else
        # There is no Unbound configuartion directory so there is nothing
        # to archive
        echo -e "No Unbound configuration directory exists at"
        echo -e "$unbound_config_dir"
        echo -e "\nCannot backup Unbound configuration, no configuration directory"
    fi
}

# Offer to remove the current Unbound configuration if it exists but force
# a backup flow in order to do it
remove_config() {
    obnoxious_header
    action_text="remove Unbound's current configuration"
    if [[ -d "$unbound_config_dir-backup" ]]; then
        # A backup directory exists, check if there are any archives
        if [[ "$(ls -A $unbound_config_dir-backup/*.tar.gz)" ]]; then
            # We think there is at least one archive in it
            if [[ -d "$unbound_config_dir" ]]; then
                # An Unbound configuration directory exists
                if [[ "$(ls -A $unbound_config_dir)" ]]; then
                    # A config probably exists
                    title_text="This command will $action_text"
                    confirm_action
                    echo -e "Removing current Unbound configuration ..."
                    # It's probably safe to clear the configuration directory
                    rm -fr $unbound_config_dir/*
                    echo -e "\t- Done\n"
                else
                    # No Unbound configuration exists
                    echo -e "No Unbound configuration found in"
                    echo -e "$unbound_config_dir"
                    echo -e "\nCannot remove Unbound configuration, no configuration to remove"
                fi
            else
                # No Unbound configuration directory exists
                # It is either not there or not where we think it is
                echo -e "No Unbound configuration directory found at"
                echo -e "$unbound_config_dir"
                echo -e "\nCannot remove Unbound configuration, no configuration directory"
            fi
        else
            # A backup directory exists but no archives exist within it
            title_text="A backup is required to $action_text"
            action_text="make a backup now"
            confirm_action
            backup_config
            remove_config
        fi
    else
        # No unbound-config backup directory exists
        title_text="A backup is required to $action_text"
        action_text="make a backup now"
        confirm_action
        backup_config
        remove_config
    fi
}

delete_backup() {
    # See if there's any point running at all
    if [[ -d "$unbound_config_dir-backup" ]]; then
        # There's an unbound-config backup directory present
        # Check if it's populated
        if [[ "$(ls -A $unbound_config_dir-backup)" ]]; then
            # The --delete-backup flag requires an argument
            if [[ ! -n "$2" ]]; then
                # There wasn't one
                echo -e "The $1 flag requires a backup ID"
                echo -e "You can use --list-backups to list possible backup IDs\n"
                echo -e "Example: unbound-config $1 197001010000"
                exit 1
            else
                obnoxious_header
                # There was one, check it's something we recognise
                backup_id="$2"
                if [[ -f "$unbound_config_dir-backup/$backup_id.tar.gz" ]]; then
                    # We found a matching backup ID
                    # Make certain we want to delete it
                    action_text="delete unbound-config backup ID $backup_id"
                    title_text="This command will $action_text"
                    confirm_action
                    echo -e "Deleting unbound-config backup ID $backup_id ..."
                    rm $unbound_config_dir-backup/$backup_id.tar.gz
                    echo -e "\t- Done"
                else
                    if [[ "$backup_id" == "--all" ]]; then
                        # We got the signal we want to delete everything
                        # It still needs confirmation
                        action_text="delete all unbound-config backups"
                        title_text="This command will $action_text"
                        confirm_action
                        echo -e "Deleting unbound-config backup directory ..."
                        rm -fr $unbound_config_dir-backup
                        echo -e "\t- Done"
                    else
                        # Probably not a valid backup ID and not --all
                        echo -e "Invalid unbound-config backup ID"
                        echo -e "Use --list-backups to list possible backup IDs\n"
                        echo -e "Example: unbound-config $1 197001010000"
                        exit 0
                    fi
                fi
            fi
        else
            # We ain't found shit
            echo -e "No unbound-config backups found in"
            echo -e "$unbound_config_dir-backup"
            echo -e "\nDeleting unbound-config backup directory without confirmation..."
            rm -fr $unbound_config_dir-backup
            echo -e "\t- Done"
        fi
    else
        # There's nothing to do here
        echo -e "No unbound-config backup directory found at"
        echo -e "$unbound_config_dir-backup"
        echo -e "\nCannot delete backup(s), no backup directory"
    fi
}

list_backups() {
    obnoxious_header
    # Check for a backup directory
    if [[ -d "$unbound_config_dir-backup" ]]; then
        # A backup directory exists, check if there are any archives
        if [[ "$(ls -A $unbound_config_dir-backup)" ]]; then
            # Backup directory is not empty
            echo -e "Listing backup IDs found in $unbound_config_dir-backup ...\n"
            # List the contents of the backup directory
            echo -e "$(ls -A1 $unbound_config_dir-backup | sed -e 's/\.tar.gz$//')"
            # Append --all to the list of backup IDs to remind the user
            # they can use it
            echo -e "--all"
            echo -e "\n\t- Done\n"
        else
            # Backup directory is empty
            echo -e "No unbound-config backup IDs found in"
            echo -e "$unbound_config_dir-backup"
            echo -e "\nCannot list backup IDs, no backup IDs to list"
        fi
    else
        # No unbound-config backup directory exists
        echo -e "No unbound-config backup directory found at"
        echo -e "$unbound_config_dir-backup"
        echo -e "\nCannot list backup IDs, no backup directory"
    fi
}

restore_backup() {
    # See if there's any point running at all
    if [[ -d "$unbound_config_dir-backup" ]]; then
        # There's an unbound-config backup directory present
        # Check if it's populated
        if [[ "$(ls -A $unbound_config_dir-backup)" ]]; then
            # It's not empty, now we can get to work
            # The --restore-backup flag requires an argument
            if [[ ! -n "$2" ]]; then
                # There wasn't one
                echo -e "The $1 flag requires a backup ID"
                echo -e "You can use --list-backups to list possible backup IDs\n"
                echo -e "Example: unbound-config $1 197001010000"
                exit 1
            else
                # We got an argument
                obnoxious_header
                # Test the validity of the given argument
                backup_id="$2"
                if [[ -f "$unbound_config_dir-backup/$backup_id.tar.gz" ]]; then
                    # The unbound-config backup directory is not empty
                    # Make sure we have a destination to restore to
                    if [[ -d "$unbound_config_dir" ]]; then
                        # Test for tar before we try use it
                        package="tar"
                        test_package
                        action_text="restore unbound-config backup ID $backup_id"
                        title_text="This command will $action_text"
                        confirm_action
                        echo -e "Removing current Unbound configuration if any exists..."
                        # If we are restoring a backup, first nuke any current config
                        rm -fr $unbound_config_dir/*
                        echo -e "\t- Done\n"
                        # Extract the archive to its destination
                        echo -e "Restoring unbound-config backup ID $backup_id...\n"
                        tar -vzxf "$unbound_config_dir-backup/$backup_id.tar.gz" -C $unbound_config_dir --force-local
                        echo -e "\n\t- Done"
                    else
                        # No Unbound configuration directory exists
                        echo -e "No Unbound configuration directory found at"
                        echo -e "$unbound_config_dir"
                        echo -e "\nCannot restore backup, no configuration directory"
                    fi
                else
                    # Probably not a valid backup ID
                    echo -e "Invalid unbound-config backup ID"
                    echo -e "Use --list-backups to list possible backup IDs\n"
                    echo -e "Example: unbound-config $1 197001010000"
                    exit 0
                fi
            fi
        else
            # The backup directory is empty
            echo -e "No unbound-config backup IDs found in"
            echo -e "$unbound_config_dir-backup"
            echo -e "\nCannot restore backup, no backup to restore"
        fi
    else
        # No unbound-config backup directory exists
        echo -e "No unbound-config backup directory found at"
        echo -e "$unbound_config_dir-backup"
        echo -e "\nCannot restore backup, no backup directory"
    fi
}

show_version() {
    echo -e "unbound-config v$version"
}

# We all need a little help from time to time
help_function() {
    echo -e "Usage: unbound-control [OPTION [PARAM]]

Where OPTION is one of

    -b                      Backup the current Unbound configuration to a
    backup                  .tar.gz archive located within
    --backup-config         $unbound_config_dir-backup

                            Takes an optional parameter to be normalised and
                            used as the backup ID, IDs containing spaces
                            must be quoted, e.g. \"my unbound backup\"
                            The default is a timestamp in the format:
                            YYYYMMDDHHMM

                            If [--rfc3339] is used as the backup ID an rfc3339
                            compliant timestamp will be used instead:
                            YYYY-MM-DDTHH:MM:SS-00:00

    examples:               unbound-config -b "my unbound backup"
                            unbound-config -b --rfc3339

    -c                      Install recommended unbound-config config
    config                  fragments:
    --config-recommended    Base (Required) Buffers, Caches, Hardening,
                            Libevent, Multithreading, Prefetch, Private
                            Address Ranges, Verbosity

    -d                      Download unbound-config Unbound binaries in a
    download                .tar.gz archive to $temp_dir
    --download-unbound
                            Takes an optional parameter [--force] to remove an
                            existing binary package before downloading a new
                            one

    -D ID                   Delete an unbound-config backup with a specified
    delete ID               backup ID
    --delete-backup ID
                            Use --list-backups to list possible backup IDs

                            The [--all] flag may be provided in place of a
                            backup ID to delete all unbound-config backups

    examples:               unbound-config -D my_unbound_backup
                            unbound-config -D --all

    -h                      Display this help dialogue
    help
    --help

    -i                      Install unbound-config unbound binaries:
    unbound                 unbound, unbound-anchor, unbound-checkconf,
    --install-unbound       unbound-control, unbound-control-setup,
                            unbound-host

                            Takes an optional parameter [--unbound-only] to
                            install only the unbound binary

                            Note: legacy unbound-checkconf and unbound-control
                            may fail on more modern unbound configuration
                            options 

    -I                      Download and install the unbound-config script to
    script                  local storage, or update an existing locally
    --install-script        installed copy

    -l                      List possible backup IDs found in
    list                    $unbound_config_dir-backup
    --list-backups          Useful for getting backup IDs for --delete-backup
                            and --restore-backup

    -r                      Remove the current Unbound configuration
    remove                  A backup is required before removing any existing
    --remove-config         configuration, prompts for backup if none exist

    -R ID                   Restore a backup of your Unbound configuration to
    restore ID              the Unbound configuration directory located at
    --restore-backup ID     $unbound_config_dir

    example:                unbound-config -D my_unbound_backup

    -u                      Uninstall any unbound binaries unbound-config may
    uninstall               have installed
    --uninstall-unbound

    -v                      Displays the unbound-config version
    version
    --version               Current unbound-config version v$version"
}

# Extremely basic service handler function
# What could go wrong here?
service_handler() {
    # A slightly safer bet than assuming systemd will be present
    package="init-system-helpers"
    test_package
    echo -e "Sending $service_action action to $service service ..."
    service $service $service_action
    echo -e "\t- Done\n"
}

# The ugliest dependency check you'll ever see
test_package() {
    # Allow for skipping dependency checks
    if [[ "$SKIP_DEPENDENCY_CHECKS" == "true" ]]; then
        echo -e "[INFO] Skipping dependency check for $package ...\n"
    else
        package_query="$(dpkg-query -W --showformat='${Status}\n' $package | grep "install ok installed")"
        if [[ ! -n "$package_query" ]]; then
            package_to_install="$package"
            test_apt="$(dpkg-query -W --showformat='${Status}\n' apt | grep "install ok installed")"
            if [[ -n "$test_apt" ]]; then
                # We think we found apt
                # Ask if we can use it to install what we need
                action_text="install $package_to_install using apt now"
                title_text="Required package $package_to_install not found"
                confirm_action
                # If we land here we got permission to install using apt
                apt install --yes --no-install-recommends $package_to_install
            else
                # Let the user figure it out
                echo -e "\e[31;1m$package_to_install is not installed\e[0m\n"
                echo -e "Install $package_to_install using your system package manager or do"
                echo -e "'export SKIP_DEPENDENCY_CHECKS=true' and then run this script again"
                exit 1
            fi
        fi
    fi
}

test_architecture() {
    # I can't use uname -i here like I normally would because raspberrypi
    # devices may report unknown for this flag which is super helpful
    host_arch="$(uname -m)"
    echo -e "Testing host architecture ..."
    if [[ "$host_arch" == "aarch64" ]] || [[ "$host_arch" == "armv8" ]]; then
        # Host can probably use aarch64 binaries
        host_arch="aarch64"
    else
        if [[ "$host_arch" == "armhf" ]] || [[ "$host_arch" == "armv7l" ]] || [[ "$host_arch" == "armv6l" ]]; then
            # Host can probably use armhf binaries
            host_arch="armhf"
        else
            # Neither aarch64 nor armhf
            echo -e "\nIncompatible host architecture"
            echo -e "Supported host architectures: aarch64 (armv8), armhf (armv6l, armv7l)\n"
            echo -e "Your host architecture is $host_arch"
            exit 1
        fi
    fi
    echo -e "\t- Done\n"
}

# Install unbound-config recommended configuration fragments
config_recommended() {
    obnoxious_header
    test_cores="$(grep -c ^processor /proc/cpuinfo)"
    # Test if it even makes any sense to install this config
    package="unbound"
    test_package
    # libevent is also required
    package="libevent-dev"
    test_package
    package="wget"
    test_package
    action_text="install a recommended Unbound configuration"
    title_text="This command will $action_text"
    confirm_action
    # Backup first
    backup_config
    # Remove existing config
    remove_config
    #Install required unbound-config base config
    echo -e "Installing base.conf ..."
    wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/base.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    # Install recommended unbound-config config fragments
    echo -e "Installing buffers.conf ..."
    wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/buffers.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing caches.conf ..."
    wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/caches.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing hardening.conf ..."
    wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/hardening.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing libevent.conf ..."
    wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/libevent.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    # Test CPU cores to see if we should enable multithreading
    echo -e "Determining number of CPU cores ..."
    echo -e "\t- $test_cores CPU cores detected\n"
    if [[ "$test_cores" -gt "1" ]]; then
        # Thread count must be divisible by two
        if [[ $(( "test_cores" % 2 )) -eq "0" ]]; then
            thread_count="$test_cores"
        else
            thread_count="$(( "$test_cores" - 1 ))"
        fi
        echo -e "Installing multithreading.conf ..."
        wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/multithreading.conf -P $unbound_config_dir
        echo -e "\t- Done\n"
        # Due to diminishing returns, set a maximum of 16 cache slabs
        # Slab count must be a power of two
        if [[ "$thread_count" -ge "16" ]]; then
             # Sixteen or greater threads
             slab_count="16"
             echo -e "Adjusting cache slab count ..."
             sed -i s"/slabs: 4/slabs: $slab_count/"g $unbound_config_dir/caches.conf
             echo -e "\t- Done"
             echo -e "Number of cache slabs: $slab_count\n"
             echo -e "Adjusting thread count ..."
             sed -i s"/threads: 4/threads: $thread_count/"g $unbound_config_dir/multithreading.conf
             echo -e "\t- Done"
             echo -e "Number of threads: $thread_count\n"
        else
            if [[ "$thread_count" -ge "8" ]]; then
                # Eight or greater threads, less than sixteen threads
                # The closest power of two is eight
                slab_count="8"
                echo -e "Adjusting cache slab count ..."
                sed -i s"/slabs: 4/slabs: $slab_count/"g $unbound_config_dir/caches.conf
                echo -e "\t- Done"
                echo -e "Number of cache slabs: $slab_count\n"
                echo -e "Adjusting thread count ..."
                sed -i s"/threads: 4/threads: $thread_count/"g $unbound_config_dir/multithreading.conf
                echo -e "\t- Done"
                echo -e "Number of threads: $thread_count\n"
            else
                # Four or greater threads, less than eight threads
                if [[ "$thread_count" -ge "4" ]]; then
                    # Four or greater threads, less than eight threads
                    # The closest power of two is the default, four
                    echo -e "[INFO] Using unbound-config default 4 cache slabs ...\n"
                    if [[ "$test_cores" -eq "4" ]]; then
                        # Exactly four threads
                        echo -e "[INFO] Using unbound-config default 4 threads ...\n"
                    else
                        # Greater than four threads
                        echo -e "Adjusting thread count ..."
                        sed -i s"/threads: 4/threads: $thread_count/"g $unbound_config_dir/multithreading.conf
                        echo -e "\t- Done"
                        echo -e "Number of threads: $thread_count\n"
                    fi
                else
                    # Less than four threads
                    slab_count="2"
                    echo -e "Adjusting cache slab count ..."
                    sed -i s"/slabs: 4/slabs: $slab_count/"g $unbound_config_dir/caches.conf
                    echo -e "\t- Done"
                    echo -e "Number of cache slabs: $slab_count\n"
                    echo -e "Adjusting thread count ..."
                    sed -i s"/threads: 4/threads: $thread_count/"g $unbound_config_dir/multithreading.conf
                    echo -e "\t- Done"
                    echo -e "Number of threads: $thread_count\n"
                fi
            fi
        fi
    else
        # One (or undetectable) thread(s), err on the side of caution
        slab_count="2"
        echo -e "Skipping multithreading.conf ...\n"
        echo -e "Adjusting cache slab count ..."
        sed -i s"/slabs: 4/slabs: $slab_count/"g $unbound_config_dir/caches.conf
        echo -e "\t- Done"
        echo -e "Number of cache slabs: $slab_count\n"
    fi
    echo -e "Installing prefetch.conf ..."
    wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/prefetch.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing private-ranges.conf ..."
    wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/private-ranges.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    echo -e "Installing verbosity.conf ..."
    wget -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/verbosity.conf -P $unbound_config_dir
    echo -e "\t- Done\n"
    service_action="restart"
    service="unbound"
    service_handler
}

# Download unbound-config .tar.gz packaged Unbound binaries
download_unbound() {
    obnoxious_header
    # Add a parameter to allow forcing download of an unbound binary package
    # even if a current one already exists in the target directory
    if [[ "$2" == "--force" ]]; then
        if [[ -f "$temp_dir/unbound-$unbound_version.tar.gz" ]]; then
            rm $temp_dir/unbound-$unbound_version.tar.gz
        fi
    fi
    test_architecture
    package="wget"
    test_package
    # Use test_arch result to determine which package to download
    echo -e "Downloading unbound-config Unbound binaries for $host_arch ..."
    # Download if newer or nonexisting
    wget -c -nv -N -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/binaries/$host_arch/unbound-$unbound_version.tar.gz -P $temp_dir
    echo -e "\t- Done\n"
    echo -e "Extracting unbound-$unbound_version.tar.gz to $temp_dir ...\n"
    tar -vzxf $temp_dir/unbound-$unbound_version.tar.gz -C $temp_dir
    echo -e "\n\t- Done\n"
}

install_script() {
    # We need to figure out the actual user if we were called with sudo
    if [[ -n $SUDO_USER ]]; then
        script_user="$SUDO_USER"
    else
        script_user="$USER"
    fi
    system_bin_dir="/usr/local/bin"
    user_bin_dir="/home/$script_user/bin"
    # Prefer /usr/local/bin
    if [[ -d "$system_bin_dir" ]]; then
        script_dir="$system_bin_dir"
    else
        # But the user's personal bin sirectory will do
        if [[ ! -d "$user_bin_dir" ]]; then
            action_text="create a personal bin directory"
            title_text="This command will $action_text"
            confirm_action
            # Even if we have to create it
            mkdir $user_bin_dir
            chown $script_user:$script_user $user_bin_dir
        fi
        script_dir="$user_bin_dir"
        # We need to warn if the personal bin isn't in $PATH
        if [[ ":$PATH:" == *":$script_dir:"* ]]; then
             title_text="Personal bin directory created"
             message_text="Please ensure the personal bin directory $script_dir exists in the system \$PATH.\n\nYou can add this path to your system \$PATH temporarily or as required using the following command:\nexport PATH=$script_dir:\$PATH"
             message_box
        fi
    fi
    package="wget"
    test_package
    # Action text for installing and updating locally installed unbound-config
    if [[ -f "$script_dir/unbound-config" ]]; then
        action_text="update the locally installed unbound-config"
    else
        action_text="install unbound-config locally"
    fi
    title_text="This command will $action_text"
    confirm_action
    echo -e "Downloading and installing unbound-config ...\n"
    # Always pull the latest unbound-config from git
    wget -nv -q --show-progress https://raw.githubusercontent.com/saint-lascivious/unbound-config/master/script/unbound-config -O $script_dir/unbound-config
    # Set owner:group for unbound-config if we install to the user's /home/$USER/bin directory
    if [[ "$script_dir" == "$user_bin_dir" ]]; then
    chown $script_user:$script_user $script_dir/unbound-config
    fi
    # Make sure the installed unbound-config script is executable
    chmod +x $script_dir/unbound-config
    echo -e "\n\t - Done\n"
    $script_dir/unbound-config --version
}

# Install unbound-config Unbound binaries
install_unbound() {
    obnoxious_header
    # Use the system package manager's setup of Unbound
    # (seems counterintuitive I know, but we use the package manager's init system)
    action_text="install unbound-config Unbound binaries"
    title_text="Before you $action_text"
    message_text="It is safe, but not necessarily recommended to replace the system unbound binaries with those provided. Any updates to the system package will remove the custom binary."
    message_box
    package="unbound"
    test_package
    # Since there is a non-zero possibility we might get the chicken before the
    # egg, ensure a binary package exists
    # download_unbound tests the architecture so we kill two, uh... chickens
    download_unbound
    title_text="This command will $action_text"
    confirm_action
    service_action="stop"
    service="unbound"
    service_handler
    echo -e "Installing unbound ..."
    cp $temp_dir/unbound $unbound_dir
    echo -e "\t- Done\n"
    # It's possible the user is only interested in the unbound binary
    # so start the service and exit now if --unbound-only was passed
    if [[ "$2" == "--unbound-only" ]]; then
        service_action="start"
        service_handler
        exit 0
    fi
    echo -e "Installing unbound-anchor ..."
    cp $temp_dir/unbound-anchor $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-checkconf ..."
    cp $temp_dir/unbound-checkconf $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-control ..."
    cp $temp_dir/unbound-control $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-control-setup ..."
    cp $temp_dir/unbound-control-setup $unbound_dir
    echo -e "\t- Done\n"
    echo -e "Installing unbound-host ..."
    cp $temp_dir/unbound-host $unbound_host_dir
    echo -e "\t- Done\n"
    service_action="start"
    service_handler
}

# Uninstall unbound-config Unbound binaries
uninstall_unbound() {
    obnoxious_header
    package="unbound"
    test_package
    action_text="uninstall unbound-config Unbound binaries"
    title_text="This command will $action_text"
    confirm_action
    service_action="stop"
    service="unbound"
    service_handler
    # Test if the targets exist before trying to remove them to
    # avoid noisy failures
    if [[ -f "$unbound_dir/unbound" ]]; then
        echo -e "Uninstalling unbound ..."
        rm $unbound_dir/unbound
        echo -e "\t- Done\n"
    fi
    if [[ -f "$unbound_dir/unbound-anchor" ]]; then
        echo -e "Uninstalling unbound-anchor ..."
        rm $unbound_dir/unbound-anchor
        echo -e "\t- Done\n"
    fi
    if [[ -f "$unbound_dir/unbound-checkconf" ]]; then
        echo -e "Uninstalling unbound-checkconf ..."
        rm $unbound_dir/unbound-checkconf
        echo -e "\t- Done\n"
    fi
    if [[ -f "$unbound_dir/unbound-control" ]]; then
        echo -e "Uninstalling unbound-control ..."
        rm $unbound_dir/unbound-control
        echo -e "\t- Done\n"
    fi
    if [[ -f "$unbound_dir/unbound-control-setup" ]]; then
        echo -e "Uninstalling unbound-control-setup ..."
        rm $unbound_dir/unbound-control-setup
        echo -e "\t- Done\n"
    fi
    if [[ -f "$unbound_host_dir/unbound" ]]; then
        echo -e "Uninstalling unbound-host ..."
        rm $unbound_host_dir/unbound-host
        echo -e "\t- Done\n"
    fi
    # Remind the user that they need to finish the job
    # All methods of testing if it is actually an unbound-config binary or
    # from the system package manager are annoying or unreliable and annoying
    title_text="After you $action_text"
    message_text="Reinstall or uninstall Unbound using your system package manager\n\nExample:\nsudo apt install --reinstall unbound\nsudo apt remove unbound*"
    message_box
}

# The current user needs to be root or have access to sudo
if [[ ! $EUID -eq 0 ]];then
    if [[ -x "$(command -v sudo)" ]]; then
        # Preserve the environment when re-running with sudo
        exec sudo -E bash "$0" "$@"
        exit $?
    else
        echo -e "\e[31;1m\t- Run unbound-config as root or install sudo\e[0m\n"
        echo -e "\t- Aborting"
        exit 1
    fi
fi

# Define the commandline options unbound-config accepts and assign a function
case "${1}" in
    # Very few arguments process strings themselves
    "-b" | "backup" | "--backup-config"         ) backup_config "$@" ;;
    "-c" | "config" | "--config-recommended"    ) config_recommended ;;
    "-d" | "download" | "--download-unbound"    ) download_unbound "$@" ;;
    "-D" | "delete" | "--delete-backup"         ) delete_backup "$@" ;;
    "-h" | "help" | "--help"                    ) help_function ;;
    "-i" | "unbound" | "--install-unbound"      ) install_unbound ;;
    "-I" | "script" | "--install-script"        ) install_script ;;
    "-l" | "list" | "--list-backups"            ) list_backups  ;;
    "-r" | "remove" | "--remove-config"         ) remove_config ;;
    "-R" | "restore" | "--restore-backup"       ) restore_backup "$@" ;;
    "-u" | "uninstall" | "--uninstall-unbound"  ) uninstall_unbound ;;
    "-v" | "version" | "--version"              ) show_version ;;
esac

if [[ ! -n "$1" ]]; then
   echo -e "unbound-config v$version requires one or more flags to operate"
   echo -e "Use 'unbound-config --help' for detailed help information"
fi
